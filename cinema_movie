#!/usr/bin/env python

# Code to take in a Cinema database and make a movie from it.
#
# Developer: Terry Turton, Los Alamos National Laboratory
# Developer: David H. Rogers, Los Alamos National Laboratory
#

import argparse
import configparser
import textwrap
import numpy as np
import pandas as pd
import os, sys
import cmovie

ProgName = "cm"

# ---------------------------------------------------------------------------
# set up command line args
# ---------------------------------------------------------------------------
conf_parser = argparse.ArgumentParser(
    # Turn off help, so we print all options in response to -h
    add_help=False
    )

args, remaining_argv = conf_parser.parse_known_args()

desc = """A tool that creates simple movies from Cinema databases
"""
ep = """
Examples:
    ./simple_movie --fps 10 --cdb "my.cdb"

        movie: Set output movie name
        path:  Set input path to Cinema datbase
        cdb:   Set input Cinema database name
        views  Set input csv file name to choose views in the movie
        fps:   Set the frame rate for the movie


"""
parser = argparse.ArgumentParser(
                    formatter_class=argparse.RawDescriptionHelpFormatter,
                    parents=[conf_parser],
                    description=textwrap.dedent(desc),
                    epilog=textwrap.dedent(ep)
                    )

parser.add_argument( "--fps", default=5,
    help="frames per second")
parser.add_argument( "--movie", default="cinema.mp4",
    help="output movie name")
parser.add_argument( "--path", default="./data/",
    help="input path to input Cinema database")
parser.add_argument( "--cdb", default="example_data.cdb",
    help="input cinema database")
parser.add_argument( "--views", default="views.csv",
    help="input csv file of views included in the movie")

args = parser.parse_args(remaining_argv)
print (args.fps, args.movie, args.path,args.cdb,args.views)

#----------------------------------------------------------------------------

# Read in yaml params and validate
cmovie.core.hello()
movie_params = cmovie.core.get_params()

# Read in data.csv as a dataframe
pathIn = args.path + args.cdb + '/'

data_csv_file = pathIn + 'data.csv'
cmovie.core.validatePath(data_csv_file)
dfCDB = pd.read_csv(data_csv_file, sep=',')
frame_var = "time"
FILE_choice = "FILE"

'''
# Validate the CDB; return value is
#   false if it is a static CDB with no variables in the "views" variable
#   true if there is a valid view requested
notStatic = cmovie.core.validateCDB(movie_params.get("frame_var"), movie_params.get("FILE_choice"), movie_params.get("views"), dfCDB)
if notStatic:   # Select only those rows which match the requested view
    myviews = movie_params.get("views")
    for x in myviews:
        dfCDB = dfCDB[dfCDB[x]==myviews.get(x)]
'''
if len(dfCDB) > 0 :
    # Sort by frame variable
    dfCDB.sort_values(by=frame_var, axis=0, ascending=True, inplace=True, kind='quicksort', na_position='last')
    # Make movie
    cmovie.core.output_movie( args.movie, args.fps, FILE_choice, pathIn, dfCDB)
else:
    sys.stdout.write ('ERROR No images satisfied the view criteria' )
