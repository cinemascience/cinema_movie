#!/usr/bin/env python

# Code to take in a Cinema database and make a movie from it.
#
# Developer: Terry Turton, Los Alamos National Laboratory
# Developer: David H. Rogers, Los Alamos National Laboratory
#

import argparse
import configparser
import textwrap
import numpy as np
import pandas as pd
import os, sys
import cmovie

ProgName = "cm"

# ---------------------------------------------------------------------------
# set up command line args
# ---------------------------------------------------------------------------
conf_parser = argparse.ArgumentParser(
    # Turn off help, so we print all options in response to -h
    add_help=False
    )

args, remaining_argv = conf_parser.parse_known_args()

desc = """A tool that creates simple movies from Cinema databases
"""
ep = """
Examples:
    ./simple_movie --fps 10 --cdb "my.cdb"

        path:   Set input path to Cinema datbase (default: ./data/)
        cdb:    Set input Cinema database name (default: example_data.cdb)
        frames: Set input csv file name to choose views in the movie; assumes ./ path (default: frames.csv)
        FILE:   Set the image column used from the CDB (default: FILE)
        fps:    Set the frame rate for the movie (default: 5 fps)
        movie:  Set output movie name (default: cinema.mp4)

"""
parser = argparse.ArgumentParser(
                    formatter_class=argparse.RawDescriptionHelpFormatter,
                    parents=[conf_parser],
                    description=textwrap.dedent(desc),
                    epilog=textwrap.dedent(ep)
                    )

parser.add_argument( "--path", default="./data/",
    help="path to input Cinema database")
parser.add_argument( "--cdb", default="example_data.cdb",
    help="input cinema database")
parser.add_argument( "--frames", default="frames.csv",
    help="input csv file of frames (images) to be included in the movie; assumed to be in ./ ")
parser.add_argument( "--FILE", default="FILE",
    help="defines which image column will be used in the movie")
parser.add_argument( "--fps", default=5,
    help="frames per second")
parser.add_argument( "--movie", default="cinema.mp4",
    help="output movie name")

args = parser.parse_args(remaining_argv)

#----------------------------------------------------------------------------

# Read in yaml params and validate
cmovie.core.hello()

# Read in data.csv and the frame csv files as dataframes; validate path and dfs
pathIn = args.path + args.cdb + '/'
FILE_choice = args.FILE

data_csv_file = pathIn + 'data.csv'
frames_file = './' + args.frames
cmovie.core.validateFile(data_csv_file)
cmovie.core.validateFile(frames_file)

dfCDB = pd.read_csv(data_csv_file, sep=',')
dfFrames = pd.read_csv(frames_file, sep=',')
cmovie.core.validateDFs(dfCDB, dfFrames, FILE_choice)
dfMovie = pd.merge(dfCDB, dfFrames, on=list(dfFrames.columns), how='inner')

if len(dfMovie) > 0 :    # Make movie
    cmovie.core.output_movie( args.movie, args.fps, FILE_choice, pathIn, dfMovie)
else:
    sys.stdout.write ('ERROR No images satisfied the view criteria' )
