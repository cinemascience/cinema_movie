#!/usr/bin/env python

# Code to take in a Cinema database and make a movie from it.
#
# Developer: Terry Turton, Los Alamos National Laboratory
# Developer: David H. Rogers, Los Alamos National Laboratory
#

import numpy as np
import pandas as pd
import os, sys
import cmovie

# Read in yaml params as dictionary
cmovie.core.hello()
movie_params = cmovie.core.get_params()
#print (movie_params)

# Read in data.csv and sort by column of interest
pathIn = movie_params.get("cdb_path") + movie_params.get("cdb_name") + '/'
csv_filename = pathIn + 'data.csv'

dfCDB = pd.read_csv(csv_filename, sep=',')
sys.stdout.write ('Using image column: {}\n'.format(movie_params.get("FILE_choice") ))

# Select only those rows in the data.csv dataframe which match the view requested
myviews = movie_params.get("views")
if bool(myviews):
    sys.stdout.write ('View Requested: {}\n'.format(myviews))

    for x in myviews:
        dfCDB = dfCDB[dfCDB[x]==myviews.get(x)]
else :
    sys.stdout.write ('No view specified, all images in database will go into the movie. \n'.format())

control_var = movie_params.get("frame_var")
sys.stdout.write ( 'Control Variable: {}\n'.format(control_var))
dfCDB.sort_values(by=control_var, axis=0, ascending=True, inplace=True, kind='quicksort', na_position='last')

cmovie.core.output_movie( movie_params.get("movie_name"), movie_params.get("frame_rate"), movie_params.get("FILE_choice"), pathIn, dfCDB)
sys.stdout.write ( 'Movie is in: {}\n'.format( movie_params.get("movie_name") ))
